# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

union GenericMorph = ComponentBaseCta | ComponentBaseDontMissOut | ComponentBaseList | ComponentBaseTitleComponent | ComponentBaseTitleWithIcons | ComponentFooterInnerCopyright | ComponentFooterInnerFooterColumn | ComponentHeaderTitleColumn | ComponentHomeBookBlumi | ComponentHomeExploreTreatment | ComponentHomeHero | ComponentHomeHowItWorks | ComponentHomeLatestListing | ComponentHomeListCities | ComponentHomeListIcons | ComponentHomeListImages | ComponentHomeListMarked | ComponentHomeListSlider | ComponentHomeListSliderReviews | ComponentHomeThingsWondering | ComponentHomeWhatTheySay | ComponentSignUpFaq | ComponentSignUpHero | Footer | Global | Header | Home | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | SignUpModel | SignUpPartner | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type ComponentBaseCta {
    buttonText: String!
    id: ID!
    placeholderText: String!
}

type ComponentBaseDontMissOut {
    buttonText: String!
    id: ID!
    title: ComponentBaseTitleComponent!
}

type ComponentBaseList {
    description: String!
    id: ID!
    link: String!
    linkPrefix: String
}

type ComponentBaseTitleComponent {
    description: String
    id: ID!
    subText: String
    titleWithIcons(filters: ComponentBaseTitleWithIconsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseTitleWithIcons]
}

type ComponentBaseTitleWithIcons {
    icon: UploadFile
    id: ID!
    text: String
}

type ComponentFooterInnerCopyright {
    copyrightText: String!
    id: ID!
    year: String!
}

type ComponentFooterInnerFooterColumn {
    description(filters: ComponentBaseListFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseList]
    id: ID!
    title: String!
}

type ComponentHeaderTitleColumn {
    id: ID!
    list(filters: ComponentBaseListFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseList]
    title: String
}

type ComponentHomeBookBlumi {
    id: ID!
    listImages(filters: ComponentHomeListImagesFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListImages]
    title: ComponentBaseTitleComponent!
}

type ComponentHomeExploreTreatment {
    buttonText: String
    heading: ComponentBaseTitleComponent!
    id: ID!
    listImages(filters: ComponentHomeListImagesFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListImages]
}

type ComponentHomeHero {
    cta: ComponentBaseCta!
    heading: ComponentBaseTitleComponent!
    id: ID!
    list(filters: ComponentHomeListMarkedFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListMarked]!
    listIcons(filters: ComponentHomeListIconsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListIcons]!
    picture: UploadFile!
}

type ComponentHomeHowItWorks {
    heading: ComponentBaseTitleComponent!
    id: ID!
    listSlider(filters: ComponentHomeListSliderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListSlider]!
}

type ComponentHomeLatestListing {
    buttonText: String!
    id: ID!
    listCities(filters: ComponentHomeListCitiesFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListCities]!
    listSlider(filters: ComponentHomeListSliderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListSlider]!
    title: ComponentBaseTitleComponent!
}

type ComponentHomeListCities {
    id: ID!
    link: String!
    title: String!
}

type ComponentHomeListIcons {
    href: String
    icon: UploadFile!
    id: ID!
    text: String!
}

type ComponentHomeListImages {
    description: String!
    href: String
    id: ID!
    image: UploadFile!
    title: String!
}

type ComponentHomeListMarked {
    id: ID!
    item: String!
}

type ComponentHomeListSlider {
    description: String!
    discountPrice: String
    fullPrice: String
    href: String
    icon: UploadFile
    id: ID!
    image: UploadFile!
    step: String
    title: String!
}

type ComponentHomeListSliderReviews {
    author: UploadFile
    authorName: String
    description: String!
    icon: UploadFile!
    id: ID!
    images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    images_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    title: String!
}

type ComponentHomeThingsWondering {
    bigTitle(filters: ComponentBaseTitleWithIconsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseTitleWithIcons]!
    buttonText: String!
    description: String!
    email: String!
    id: ID!
    list(filters: ComponentBaseListFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseList]!
    smallTitle(filters: ComponentBaseTitleWithIconsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseTitleWithIcons]!
    subText: String!
}

type ComponentHomeWhatTheySay {
    id: ID!
    reviews(filters: ComponentHomeListSliderReviewsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListSliderReviews]!
    title: ComponentBaseTitleComponent
}

type ComponentSignUpFaq {
    id: ID!
    list(filters: ComponentBaseListFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseList]
    title: ComponentBaseTitleComponent!
}

type ComponentSignUpHero {
    id: ID!
    image: UploadFile!
    list(filters: ComponentHomeListIconsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeListIcons]
    titleForm(filters: ComponentBaseTitleWithIconsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseTitleWithIcons]!
}

type DeleteMutationResponse {
    documentId: ID!
}

type Footer {
    columns(filters: ComponentFooterInnerFooterColumnFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentFooterInnerFooterColumn]
    copyright: ComponentFooterInnerCopyright!
    createdAt: DateTime
    cta: ComponentBaseCta!
    documentId: ID!
    label: String!
    locale: String
    localizations: [Footer]!
    localizations_connection: FooterRelationResponseCollection
    logo: UploadFile!
    publishedAt: DateTime
    updatedAt: DateTime
}

type FooterRelationResponseCollection {
    nodes: [Footer!]!
}

type Global {
    createdAt: DateTime
    documentId: ID!
    favicon: UploadFile
    locale: String
    localizations: [Global]!
    localizations_connection: GlobalRelationResponseCollection
    publishedAt: DateTime
    siteDescription: String!
    siteName: String!
    updatedAt: DateTime
}

type GlobalRelationResponseCollection {
    nodes: [Global!]!
}

type Header {
    buttonText: String!
    createdAt: DateTime
    documentId: ID!
    link(filters: ComponentBaseListFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBaseList]
    locale: String
    localizations: [Header]!
    localizations_connection: HeaderRelationResponseCollection
    logo: UploadFile!
    publishedAt: DateTime
    submenu(filters: ComponentHeaderTitleColumnFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHeaderTitleColumn]
    updatedAt: DateTime
}

type HeaderRelationResponseCollection {
    nodes: [Header!]!
}

type Home {
    bookBlumi: ComponentHomeBookBlumi
    createdAt: DateTime
    documentId: ID!
    dontMissOut: ComponentBaseDontMissOut
    exploreTreatment: ComponentHomeExploreTreatment
    hero: ComponentHomeHero
    howItWorks: ComponentHomeHowItWorks
    latestListing: ComponentHomeLatestListing
    locale: String
    localizations: [Home]!
    localizations_connection: HomeRelationResponseCollection
    publishedAt: DateTime
    thingsWondering: ComponentHomeThingsWondering
    title: String!
    updatedAt: DateTime
    whatTheySay(filters: ComponentHomeWhatTheySayFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomeWhatTheySay]
}

type HomeRelationResponseCollection {
    nodes: [Home!]!
}

type I18NLocale {
    code: String
    createdAt: DateTime
    documentId: ID!
    locale: String
    localizations(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [I18NLocale]!
    localizations_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleRelationResponseCollection
    name: String
    publishedAt: DateTime
    updatedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
    nodes: [I18NLocale!]!
    pageInfo: Pagination!
}

type I18NLocaleRelationResponseCollection {
    nodes: [I18NLocale!]!
}

type Mutation {
    "Change user password. Confirm with the current password."
    changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    createReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    createReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    "Create a new role"
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
    "Create a new user"
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
    deleteFooter: DeleteMutationResponse
    deleteGlobal: DeleteMutationResponse
    deleteHeader: DeleteMutationResponse
    deleteHome: DeleteMutationResponse
    deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
    deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
    deleteSignUpModel: DeleteMutationResponse
    deleteSignUpPartner: DeleteMutationResponse
    deleteUploadFile(id: ID!): UploadFile
    "Delete an existing role"
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
    "Delete an existing user"
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    "Confirm an email users email address"
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    "Request a reset password token"
    forgotPassword(email: String!): UsersPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    "Register a user"
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    "Reset user password. Confirm with a code (resetToken from forgotPassword)"
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateFooter(data: FooterInput!, status: PublicationStatus = PUBLISHED): Footer
    updateGlobal(data: GlobalInput!, status: PublicationStatus = PUBLISHED): Global
    updateHeader(data: HeaderInput!, status: PublicationStatus = PUBLISHED): Header
    updateHome(data: HomeInput!, status: PublicationStatus = PUBLISHED): Home
    updateReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    updateReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    updateSignUpModel(data: SignUpModelInput!, status: PublicationStatus = PUBLISHED): SignUpModel
    updateSignUpPartner(data: SignUpPartnerInput!, status: PublicationStatus = PUBLISHED): SignUpPartner
    updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
    "Update an existing role"
    updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
    "Update an existing user"
    updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Query {
    footer(status: PublicationStatus = PUBLISHED): Footer
    global(status: PublicationStatus = PUBLISHED): Global
    header(status: PublicationStatus = PUBLISHED): Header
    home(status: PublicationStatus = PUBLISHED): Home
    i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
    i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
    me: UsersPermissionsMe
    reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
    reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
    reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
    reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
    signUpModel(status: PublicationStatus = PUBLISHED): SignUpModel
    signUpPartner(status: PublicationStatus = PUBLISHED): SignUpPartner
    uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
    uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
    usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
    usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
    usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
}

type ReviewWorkflowsWorkflow {
    contentTypes: JSON!
    createdAt: DateTime
    documentId: ID!
    locale: String
    localizations(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflow]!
    localizations_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowRelationResponseCollection
    name: String!
    publishedAt: DateTime
    stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
    stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
    updatedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflow!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowRelationResponseCollection {
    nodes: [ReviewWorkflowsWorkflow!]!
}

type ReviewWorkflowsWorkflowStage {
    color: String
    createdAt: DateTime
    documentId: ID!
    locale: String
    localizations(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
    localizations_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
    name: String
    publishedAt: DateTime
    updatedAt: DateTime
    workflow: ReviewWorkflowsWorkflow
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
}

type SignUpModel {
    createdAt: DateTime
    documentId: ID!
    hero: ComponentSignUpHero!
    locale: String
    localizations: [SignUpModel]!
    localizations_connection: SignUpModelRelationResponseCollection
    publishedAt: DateTime
    title: String!
    updatedAt: DateTime
}

type SignUpModelRelationResponseCollection {
    nodes: [SignUpModel!]!
}

type SignUpPartner {
    createdAt: DateTime
    documentId: ID!
    faq: ComponentSignUpFaq
    hero: ComponentSignUpHero!
    locale: String
    localizations: [SignUpPartner]!
    localizations_connection: SignUpPartnerRelationResponseCollection
    publishedAt: DateTime
    title: String!
    updatedAt: DateTime
}

type SignUpPartnerRelationResponseCollection {
    nodes: [SignUpPartner!]!
}

type UploadFile {
    alternativeText: String
    caption: String
    createdAt: DateTime
    documentId: ID!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    locale: String
    localizations(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    localizations_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    publishedAt: DateTime
    related: [GenericMorph]
    size: Float!
    updatedAt: DateTime
    url: String!
    width: Int
}

type UploadFileEntityResponseCollection {
    nodes: [UploadFile!]!
    pageInfo: Pagination!
}

type UploadFileRelationResponseCollection {
    nodes: [UploadFile!]!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsPermission {
    action: String!
    createdAt: DateTime
    documentId: ID!
    locale: String
    localizations(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
    localizations_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    publishedAt: DateTime
    role: UsersPermissionsRole
    updatedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
    nodes: [UsersPermissionsPermission!]!
}

type UsersPermissionsRole {
    createdAt: DateTime
    description: String
    documentId: ID!
    locale: String
    localizations(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsRole]!
    localizations_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleRelationResponseCollection
    name: String!
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
    permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    publishedAt: DateTime
    type: String
    updatedAt: DateTime
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
    users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntityResponseCollection {
    nodes: [UsersPermissionsRole!]!
    pageInfo: Pagination!
}

type UsersPermissionsRoleRelationResponseCollection {
    nodes: [UsersPermissionsRole!]!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime
    documentId: ID!
    email: String!
    locale: String
    localizations(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
    localizations_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
    provider: String
    publishedAt: DateTime
    role: UsersPermissionsRole
    updatedAt: DateTime
    username: String!
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
    nodes: [UsersPermissionsUser!]!
    pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
    nodes: [UsersPermissionsUser!]!
}

enum PublicationStatus {
    DRAFT
    PUBLISHED
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input BooleanFilterInput {
    and: [Boolean]
    between: [Boolean]
    contains: Boolean
    containsi: Boolean
    endsWith: Boolean
    eq: Boolean
    eqi: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nei: Boolean
    not: BooleanFilterInput
    notContains: Boolean
    notContainsi: Boolean
    notIn: [Boolean]
    notNull: Boolean
    null: Boolean
    or: [Boolean]
    startsWith: Boolean
}

input ComponentBaseCtaInput {
    buttonText: String
    id: ID
    placeholderText: String
}

input ComponentBaseDontMissOutInput {
    buttonText: String
    id: ID
    title: ComponentBaseTitleComponentInput
}

input ComponentBaseListFiltersInput {
    and: [ComponentBaseListFiltersInput]
    description: StringFilterInput
    link: StringFilterInput
    linkPrefix: StringFilterInput
    not: ComponentBaseListFiltersInput
    or: [ComponentBaseListFiltersInput]
}

input ComponentBaseListInput {
    description: String
    id: ID
    link: String
    linkPrefix: String
}

input ComponentBaseTitleComponentFiltersInput {
    and: [ComponentBaseTitleComponentFiltersInput]
    description: StringFilterInput
    not: ComponentBaseTitleComponentFiltersInput
    or: [ComponentBaseTitleComponentFiltersInput]
    subText: StringFilterInput
    titleWithIcons: ComponentBaseTitleWithIconsFiltersInput
}

input ComponentBaseTitleComponentInput {
    description: String
    id: ID
    subText: String
    titleWithIcons: [ComponentBaseTitleWithIconsInput]
}

input ComponentBaseTitleWithIconsFiltersInput {
    and: [ComponentBaseTitleWithIconsFiltersInput]
    not: ComponentBaseTitleWithIconsFiltersInput
    or: [ComponentBaseTitleWithIconsFiltersInput]
    text: StringFilterInput
}

input ComponentBaseTitleWithIconsInput {
    icon: ID
    id: ID
    text: String
}

input ComponentFooterInnerCopyrightInput {
    copyrightText: String
    id: ID
    year: String
}

input ComponentFooterInnerFooterColumnFiltersInput {
    and: [ComponentFooterInnerFooterColumnFiltersInput]
    description: ComponentBaseListFiltersInput
    not: ComponentFooterInnerFooterColumnFiltersInput
    or: [ComponentFooterInnerFooterColumnFiltersInput]
    title: StringFilterInput
}

input ComponentFooterInnerFooterColumnInput {
    description: [ComponentBaseListInput]
    id: ID
    title: String
}

input ComponentHeaderTitleColumnFiltersInput {
    and: [ComponentHeaderTitleColumnFiltersInput]
    list: ComponentBaseListFiltersInput
    not: ComponentHeaderTitleColumnFiltersInput
    or: [ComponentHeaderTitleColumnFiltersInput]
    title: StringFilterInput
}

input ComponentHeaderTitleColumnInput {
    id: ID
    list: [ComponentBaseListInput]
    title: String
}

input ComponentHomeBookBlumiInput {
    id: ID
    listImages: [ComponentHomeListImagesInput]
    title: ComponentBaseTitleComponentInput
}

input ComponentHomeExploreTreatmentInput {
    buttonText: String
    heading: ComponentBaseTitleComponentInput
    id: ID
    listImages: [ComponentHomeListImagesInput]
}

input ComponentHomeHeroInput {
    cta: ComponentBaseCtaInput
    heading: ComponentBaseTitleComponentInput
    id: ID
    list: [ComponentHomeListMarkedInput]
    listIcons: [ComponentHomeListIconsInput]
    picture: ID
}

input ComponentHomeHowItWorksInput {
    heading: ComponentBaseTitleComponentInput
    id: ID
    listSlider: [ComponentHomeListSliderInput]
}

input ComponentHomeLatestListingInput {
    buttonText: String
    id: ID
    listCities: [ComponentHomeListCitiesInput]
    listSlider: [ComponentHomeListSliderInput]
    title: ComponentBaseTitleComponentInput
}

input ComponentHomeListCitiesFiltersInput {
    and: [ComponentHomeListCitiesFiltersInput]
    link: StringFilterInput
    not: ComponentHomeListCitiesFiltersInput
    or: [ComponentHomeListCitiesFiltersInput]
    title: StringFilterInput
}

input ComponentHomeListCitiesInput {
    id: ID
    link: String
    title: String
}

input ComponentHomeListIconsFiltersInput {
    and: [ComponentHomeListIconsFiltersInput]
    href: StringFilterInput
    not: ComponentHomeListIconsFiltersInput
    or: [ComponentHomeListIconsFiltersInput]
    text: StringFilterInput
}

input ComponentHomeListIconsInput {
    href: String
    icon: ID
    id: ID
    text: String
}

input ComponentHomeListImagesFiltersInput {
    and: [ComponentHomeListImagesFiltersInput]
    description: StringFilterInput
    href: StringFilterInput
    not: ComponentHomeListImagesFiltersInput
    or: [ComponentHomeListImagesFiltersInput]
    title: StringFilterInput
}

input ComponentHomeListImagesInput {
    description: String
    href: String
    id: ID
    image: ID
    title: String
}

input ComponentHomeListMarkedFiltersInput {
    and: [ComponentHomeListMarkedFiltersInput]
    item: StringFilterInput
    not: ComponentHomeListMarkedFiltersInput
    or: [ComponentHomeListMarkedFiltersInput]
}

input ComponentHomeListMarkedInput {
    id: ID
    item: String
}

input ComponentHomeListSliderFiltersInput {
    and: [ComponentHomeListSliderFiltersInput]
    description: StringFilterInput
    discountPrice: StringFilterInput
    fullPrice: StringFilterInput
    href: StringFilterInput
    not: ComponentHomeListSliderFiltersInput
    or: [ComponentHomeListSliderFiltersInput]
    step: StringFilterInput
    title: StringFilterInput
}

input ComponentHomeListSliderInput {
    description: String
    discountPrice: String
    fullPrice: String
    href: String
    icon: ID
    id: ID
    image: ID
    step: String
    title: String
}

input ComponentHomeListSliderReviewsFiltersInput {
    and: [ComponentHomeListSliderReviewsFiltersInput]
    authorName: StringFilterInput
    description: StringFilterInput
    not: ComponentHomeListSliderReviewsFiltersInput
    or: [ComponentHomeListSliderReviewsFiltersInput]
    title: StringFilterInput
}

input ComponentHomeListSliderReviewsInput {
    author: ID
    authorName: String
    description: String
    icon: ID
    id: ID
    images: [ID]
    title: String
}

input ComponentHomeThingsWonderingInput {
    bigTitle: [ComponentBaseTitleWithIconsInput]
    buttonText: String
    description: String
    email: String
    id: ID
    list: [ComponentBaseListInput]
    smallTitle: [ComponentBaseTitleWithIconsInput]
    subText: String
}

input ComponentHomeWhatTheySayFiltersInput {
    and: [ComponentHomeWhatTheySayFiltersInput]
    not: ComponentHomeWhatTheySayFiltersInput
    or: [ComponentHomeWhatTheySayFiltersInput]
    reviews: ComponentHomeListSliderReviewsFiltersInput
    title: ComponentBaseTitleComponentFiltersInput
}

input ComponentHomeWhatTheySayInput {
    id: ID
    reviews: [ComponentHomeListSliderReviewsInput]
    title: ComponentBaseTitleComponentInput
}

input ComponentSignUpFaqInput {
    id: ID
    list: [ComponentBaseListInput]
    title: ComponentBaseTitleComponentInput
}

input ComponentSignUpHeroInput {
    id: ID
    image: ID
    list: [ComponentHomeListIconsInput]
    titleForm: [ComponentBaseTitleWithIconsInput]
}

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    eqi: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    nei: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    null: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    eqi: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nei: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    null: Boolean
    or: [Float]
    startsWith: Float
}

input FooterInput {
    columns: [ComponentFooterInnerFooterColumnInput]
    copyright: ComponentFooterInnerCopyrightInput
    cta: ComponentBaseCtaInput
    label: String
    locale: String
    logo: ID
    publishedAt: DateTime
}

input GlobalInput {
    favicon: ID
    locale: String
    publishedAt: DateTime
    siteDescription: String
    siteName: String
}

input HeaderInput {
    buttonText: String
    link: [ComponentBaseListInput]
    locale: String
    logo: ID
    publishedAt: DateTime
    submenu: [ComponentHeaderTitleColumnInput]
}

input HomeInput {
    bookBlumi: ComponentHomeBookBlumiInput
    dontMissOut: ComponentBaseDontMissOutInput
    exploreTreatment: ComponentHomeExploreTreatmentInput
    hero: ComponentHomeHeroInput
    howItWorks: ComponentHomeHowItWorksInput
    latestListing: ComponentHomeLatestListingInput
    locale: String
    publishedAt: DateTime
    thingsWondering: ComponentHomeThingsWonderingInput
    title: String
    whatTheySay: [ComponentHomeWhatTheySayInput]
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: I18NLocaleFiltersInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    publishedAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    eqi: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    nei: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    null: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    eqi: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nei: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    null: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    eqi: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    nei: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    null: Boolean
    or: [JSON]
    startsWith: JSON
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input ReviewWorkflowsWorkflowFiltersInput {
    and: [ReviewWorkflowsWorkflowFiltersInput]
    contentTypes: JSONFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: ReviewWorkflowsWorkflowFiltersInput
    name: StringFilterInput
    not: ReviewWorkflowsWorkflowFiltersInput
    or: [ReviewWorkflowsWorkflowFiltersInput]
    publishedAt: DateTimeFilterInput
    stages: ReviewWorkflowsWorkflowStageFiltersInput
    updatedAt: DateTimeFilterInput
}

input ReviewWorkflowsWorkflowInput {
    contentTypes: JSON
    locale: String
    name: String
    publishedAt: DateTime
    stages: [ID]
}

input ReviewWorkflowsWorkflowStageFiltersInput {
    and: [ReviewWorkflowsWorkflowStageFiltersInput]
    color: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: ReviewWorkflowsWorkflowStageFiltersInput
    name: StringFilterInput
    not: ReviewWorkflowsWorkflowStageFiltersInput
    or: [ReviewWorkflowsWorkflowStageFiltersInput]
    publishedAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    workflow: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
    color: String
    locale: String
    name: String
    publishedAt: DateTime
    workflow: ID
}

input SignUpModelInput {
    hero: ComponentSignUpHeroInput
    locale: String
    publishedAt: DateTime
    title: String
}

input SignUpPartnerInput {
    faq: ComponentSignUpFaqInput
    hero: ComponentSignUpHeroInput
    locale: String
    publishedAt: DateTime
    title: String
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    eqi: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nei: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    null: Boolean
    or: [String]
    startsWith: String
}

input UploadFileFiltersInput {
    alternativeText: StringFilterInput
    and: [UploadFileFiltersInput]
    caption: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    ext: StringFilterInput
    folderPath: StringFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    height: IntFilterInput
    locale: StringFilterInput
    localizations: UploadFileFiltersInput
    mime: StringFilterInput
    name: StringFilterInput
    not: UploadFileFiltersInput
    or: [UploadFileFiltersInput]
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    publishedAt: DateTimeFilterInput
    size: FloatFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
    width: IntFilterInput
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
    action: StringFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: UsersPermissionsPermissionFiltersInput
    not: UsersPermissionsPermissionFiltersInput
    or: [UsersPermissionsPermissionFiltersInput]
    publishedAt: DateTimeFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input UsersPermissionsRoleFiltersInput {
    and: [UsersPermissionsRoleFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: UsersPermissionsRoleFiltersInput
    name: StringFilterInput
    not: UsersPermissionsRoleFiltersInput
    or: [UsersPermissionsRoleFiltersInput]
    permissions: UsersPermissionsPermissionFiltersInput
    publishedAt: DateTimeFilterInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
    users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
    description: String
    locale: String
    name: String
    permissions: [ID]
    publishedAt: DateTime
    type: String
    users: [ID]
}

input UsersPermissionsUserFiltersInput {
    and: [UsersPermissionsUserFiltersInput]
    blocked: BooleanFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    email: StringFilterInput
    locale: StringFilterInput
    localizations: UsersPermissionsUserFiltersInput
    not: UsersPermissionsUserFiltersInput
    or: [UsersPermissionsUserFiltersInput]
    password: StringFilterInput
    provider: StringFilterInput
    publishedAt: DateTimeFilterInput
    resetPasswordToken: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
    username: StringFilterInput
}

input UsersPermissionsUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    email: String
    locale: String
    password: String
    provider: String
    publishedAt: DateTime
    resetPasswordToken: String
    role: ID
    username: String
}
